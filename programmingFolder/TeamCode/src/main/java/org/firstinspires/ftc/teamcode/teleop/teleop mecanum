package org.firstinspires.ftc.teamcode.Teleop;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

import static org.firstinspires.ftc.teamcode.Teleop.Constants.*;


@TeleOp (name="teleop", group="teloop")
public class teleop extends LinearOpMode {
    //Hardware
    private DcMotor rearLeft,rearRight,frontLeft,frontRight, arm, arm2;
    private Servo rightFoundation, leftFoundation, grabber, sideServo;
    private CRServo armServo;
    //Constants


    private int driver = 0;



//



    private void printStatus() {

        telemetry.update();
    }


    @Override
    public void runOpMode() throws InterruptedException {



            rearLeft = hardwareMap.get(DcMotor.class, "rearLeft");
            rearRight= hardwareMap.get(DcMotor.class, "rearRight");
            frontLeft = hardwareMap.get(DcMotor.class, "frontLeft");
            frontRight = hardwareMap.get(DcMotor.class, "frontLeft");
            arm = hardwareMap.get(DcMotor.class, "armLeft");
            arm2 =hardwareMap.get(DcMotor.class,"armRight");
            rightFoundation = hardwareMap.get(Servo.class, "rightFoundation");
            leftFoundation = hardwareMap.get(Servo.class, "leftFoundation");
            grabber = hardwareMap.get(Servo.class, "grabber");
            armServo = hardwareMap.get(CRServo.class, "armServo");
            grabber = hardwareMap.get(Servo.class, "grabber");
            // sideServo = hardwareMap.get(CRServo.class, "sideServo");

            // left is upside-down
            rearLeft.setDirection(DcMotor.Direction.REVERSE);
            frontLeft.setDirection(DcMotorSimple.Direction.REVERSE);
            arm2.setDirection(DcMotor.Direction.REVERSE);



            // zero power behavior
            rearLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
            rearRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
            frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
            frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
            arm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
            arm2.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

            // set motor to run using encoder
            telemetry.addData("Ready!", "Press Start.");
            // wait for play

            waitForStart();




        while (opModeIsActive()) {
            //foundation();
            //arm();
            drive();

        }

        }






    private void releaseFoundation(){
        rightFoundation.setPosition(RIGHT_FOUNDATION_UP);
        leftFoundation.setPosition(LEFT_FOUNDATION_UP);
    }
    private void grabFoundation(){
        rightFoundation.setPosition(RIGHT_FOUNDATION_DOWN);
        leftFoundation.setPosition(LEFT_FOUNDATION_DOWN);
    }

    private void servoGrab(){
        grabber.setPosition(SERVO_GRAB);
    }
    private void servoRelease(){
        grabber.setPosition(SERVO_RELEASE);
    }

    private void foundation() {
        if (gamepad1.x) {

            releaseFoundation();

        }
        if (gamepad1.y) {
            grabFoundation();

        }
    }


        //Grabber code

        //Arm code
     private void arm(){
        if (gamepad2.x) {
            armServo.setPower(0.7);

        }
        else if (gamepad2.y) {
            armServo.setPower(-0.7);
        } else {

            armServo.setPower(0);
        }


         if (gamepad2.a) {
             servoGrab();

         }
         if (gamepad2.b) {
             servoRelease();
         }

         if (gamepad2.right_trigger>0.5){
             arm.setPower(-1);
             arm2.setPower(-1);

         } else if (gamepad2.left_trigger>0.5) {
             arm.setPower(1);
             arm2.setPower(1);
         } else {

             arm.setPower(0);
             arm2.setPower(0);
         }
        }

        //Drive Code



    public void drive(){
//        double frontleftPower= gamepad1.left_stick_y+gamepad1.left_stick_x-gamepad1.right_stick_x;
//        double rearleftPower = gamepad1.left_stick_y-gamepad1.left_stick_x-gamepad1.right_stick_x;
//        double frontrightPower = gamepad1.left_stick_y+gamepad1.left_stick_x+gamepad1.right_stick_x;
//        double rearrightPower = gamepad1.left_stick_y-gamepad1.left_stick_x+gamepad1.right_stick_x;



        double frontleftPower= gamepad1.left_stick_y+gamepad1.left_stick_x+gamepad1.right_stick_x;
        double rearleftPower = gamepad1.left_stick_y-gamepad1.left_stick_x+gamepad1.right_stick_x;
        double frontrightPower = gamepad1.left_stick_y-gamepad1.left_stick_x-gamepad1.right_stick_x;
        double rearrightPower = gamepad1.left_stick_y+gamepad1.left_stick_x-gamepad1.right_stick_x;

        frontleftPower= Range.clip(frontleftPower,-1,+1);
        frontrightPower= Range.clip(frontrightPower,-1,+1);
        rearleftPower= Range.clip(rearleftPower,-1,+1);
        rearrightPower= Range.clip(rearrightPower,-1,+1);

        rearRight.setPower(rearrightPower);
        rearLeft.setPower(rearleftPower);
        frontRight.setPower(frontrightPower);
        frontLeft.setPower(frontleftPower);
        }
    }
