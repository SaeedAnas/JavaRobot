package org.firstinspires.ftc.teamcode.Teleop;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

import static org.firstinspires.ftc.teamcode.Teleop.constants.*;


@TeleOp (name="te", group="teloop")
public class mecanum extends Teleop {
    //Hardware
    private DcMotor backLeft,backRight,frontLeft,frontRight, arm, arm2;
    private Servo rightFoundation, leftFoundation, grabber, sideServo;
    private CRServo armServo;
    private BNO055IMU imu;
    //Constants
    private void printStatus() {

        telemetry.update();
    }
    private void initImu() {
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();

        parameters.mode = BNO055IMU.SensorMode.IMU;
        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        parameters.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
        parameters.loggingEnabled = false;

        imu = hardwareMap.get(BNO055IMU.class, "imu");

        telemetry.addData("Status: ", "Calibrating");
        telemetry.update();
        imu.initialize(parameters);

        telemetry.addData("Status: ", "Imu Calibration Ready");
        telemetry.update();

    }

    @Override
    public void runOpMode() throws InterruptedException {



        backLeft = hardwareMap.get(DcMotor.class, "rearLeft");
        backRight= hardwareMap.get(DcMotor.class, "rearRight");
        frontLeft = hardwareMap.get(DcMotor.class, "frontLeft");
        frontRight = hardwareMap.get(DcMotor.class, "frontRight");

        
        backRight.setDirection(DcMotor.Direction.REVERSE);
        frontRight.setDirection(DcMotorSimple.Direction.REVERSE);




        // zero power behavior
        backLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontLeft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontRight.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);


        // set motor to run using encoder
        telemetry.addData("Ready!", "Press Start.");
        // wait for play

        waitForStart();




        while (opModeIsActive()) {
            drive();

        }

    }









    public void drive(){

        double y = -gamepad1.left_stick_y; // reversed
        double x = gamepad1.left_stick_x* STRAFE_FIX;
        double rx = gamepad1.right_stick_x;

        double frontLeftPower=(y + x + rx);
        double frontRightPower=(y - x - rx);
        double backLeftPower=(y - x + rx);
        double backRightPower=(y + x - rx);
        if (Math.abs(frontLeftPower) > 1 || Math.abs(backLeftPower) > 1 ||
                Math.abs(frontRightPower) > 1 || Math.abs(backRightPower) > 1 ) {
            // Find the largest power
            double max = 0;
            max = Math.max(Math.abs(frontLeftPower), Math.abs(backLeftPower));
            max = Math.max(Math.abs(frontRightPower), max);
            max = Math.max(Math.abs(backRightPower), max);

            // Divide everything by max
            frontLeftPower /= max;
            backLeftPower /= max;
            frontRightPower /= max;
            backRightPower /= max;
            backRight.setPower(backRightPower);
            backLeft.setPower(backLeftPower);
            frontRight.setPower(frontRightPower);
            frontLeft.setPower(frontLeftPower);

        }
        else{
            backRight.setPower(backRightPower);
            backLeft.setPower(backLeftPower);
            frontRight.setPower(frontRightPower);
            frontLeft.setPower(frontLeftPower);
        }


//
//        double frontLeftPower= -gamepad1.left_stick_y+gamepad1.left_stick_x+gamepad1.right_stick_x;
//        double backLeftPower = -gamepad1.left_stick_y-gamepad1.left_stick_x+gamepad1.right_stick_x;
//        double frontRightPower = -gamepad1.left_stick_y-gamepad1.left_stick_x-gamepad1.right_stick_x;
//        double backRightPower = -gamepad1.left_stick_y+gamepad1.left_stick_x-gamepad1.right_stick_x;
//
//        telemetry.addData(" fl encoder",frontLeft.getCurrentPosition());
//        telemetry.addData(" fr encoder",frontRight.getCurrentPosition());
//        telemetry.addData(" rr encoder",rearRight.getCurrentPosition());
//        telemetry.addData(" rf encoder",rearLeft.getCurrentPosition());
//        frontLeftPower= Range.clip(frontLeftPower,-1,+1);
//        frontRightPower= Range.clip(frontRightPower,-1,+1);
//        backLeftPower= Range.clip(backLeftPower,-1,+1);
//        backRightPower= Range.clip(backRightPower,-1,+1);
//
//        rearRight.setPower(backRightPower);
//        rearLeft.setPower(backLeftPower);
//        frontRight.setPower(frontRightPower);
//        frontLeft.setPower(frontLeftPower);
    }
}
